name: SmokeTests

on:
  push:
    branches: [ main ]

env:
  CI: true
  GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
  JRELEASER_OCI_COMPARTMENTID: ${{ secrets.JRELEASER_OCI_COMPARTMENTID }}

permissions:
  contents: read
  actions: write

jobs:
  precheck:
    name: Precheck
    uses: jreleaser/jreleaser/.github/workflows/step-precheck.yml@main
    secrets: inherit

  build-cli:
    name: 'CLI ${{ matrix.job.os }}'
    needs: [ precheck ]
    if: endsWith(${{ needs.precheck.outputs.version }}, '-SNAPSHOT')
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        job:
          - { os: macos-latest  , args: '-xp docker' }
          - { os: ubuntu-latest , args: '' }
          - { os: windows-latest, args: '-xp docker' }
    runs-on: ${{ matrix.job.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Decrypt secrets
        shell: bash
        run: sh .github/scripts/decrypt-secrets.sh

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: ${{ vars.JAVA_VERSION }}
          distribution: ${{ vars.JAVA_DISTRO }}
          cache: gradle

      - name: Build
        shell: bash
        run: ./gradlew -PreproducibleBuild=true build publishToMavenLocal -S

      - name: Checkout smoketests repository
        uses: actions/checkout@v4
        with:
          repository: jreleaser/smoketests-jreleaser
          path: smoketests-jreleaser
          fetch-depth: 0
          token: ${{ secrets.GIT_ACCESS_TOKEN }}

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: setup-java-${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Prepare
        shell: bash
        run: |
          cd smoketests-jreleaser
          unzip -qo ../plugins/jreleaser/build/distributions/jreleaser-${{ needs.precheck.outputs.version }}.zip
          sed -i -e "s/0.0.0-SNAPSHOT/${{ needs.precheck.outputs.version }}/g" pom.xml
          sed -i -e "s/0.0.0-SNAPSHOT/${{ needs.precheck.outputs.version }}/g" build.xml
          sed -i -e "s/0.0.0-SNAPSHOT/${{ needs.precheck.outputs.version }}/g" gradle.properties
          sh ../.github/scripts/jacoco-instrument.sh

      - name: Setup Graal
        uses: graalvm/setup-graalvm@v1
        with:
          version: ${{ vars.GRAAL_VERSION }}
          java-version: ${{ vars.GRAAL_JAVA_VERSION }}
          github-token: ${{ secrets.GIT_ACCESS_TOKEN }}

      - name: JReleaser
        shell: bash
        run: |
          cd smoketests-jreleaser
          echo "::group::➡️ build"
          chmod +x gradlew
          ./gradlew build
          chmod +x mvnw
          ./mvnw -B -ntp deploy -DaltDeploymentRepository=local::file:./target/staging-deploy
          echo "::endgroup::"
          echo "::group::➡️ json-schema"
          ./jreleaser-${{ needs.precheck.outputs.version }}/bin/jreleaser json-schema
          echo "::endgroup::"
          echo "::group::➡️ env"
          ./jreleaser-${{ needs.precheck.outputs.version }}/bin/jreleaser env
          echo "::endgroup::"
          echo "::group::➡️ assemble"
          ./jreleaser-${{ needs.precheck.outputs.version }}/bin/jreleaser assemble -PoutputDir=out
          echo "::endgroup::"
          echo "::group::➡️ config"
          ./jreleaser-${{ needs.precheck.outputs.version }}/bin/jreleaser config -PoutputDir=out
          echo "::endgroup::"
          echo "::group::➡️ changelog"
          ./jreleaser-${{ needs.precheck.outputs.version }}/bin/jreleaser changelog -PoutputDir=out
          echo "::endgroup::"
          echo "::group::➡️ download"
          ./jreleaser-${{ needs.precheck.outputs.version }}/bin/jreleaser download -PoutputDir=out --dry-run
          echo "::endgroup::"
          echo "::group::➡️ catalog"
          ./jreleaser-${{ needs.precheck.outputs.version }}/bin/jreleaser catalog -PoutputDir=out --select-current-platform
          echo "::endgroup::"
          echo "::group::➡️ checksum"
          ./jreleaser-${{ needs.precheck.outputs.version }}/bin/jreleaser checksum -PoutputDir=out --select-current-platform
          echo "::endgroup::"
          echo "::group::➡️ sign"
          ./jreleaser-${{ needs.precheck.outputs.version }}/bin/jreleaser sign -PoutputDir=out --select-current-platform
          echo "::endgroup::"
          echo "::group::➡️ deploy"
          ./jreleaser-${{ needs.precheck.outputs.version }}/bin/jreleaser deploy -PoutputDir=out --dry-run
          echo "::endgroup::"
          echo "::group::➡️ upload"
          ./jreleaser-${{ needs.precheck.outputs.version }}/bin/jreleaser upload --select-current-platform -PoutputDir=out --dry-run
          echo "::endgroup::"
          echo "::group::➡️ release"
          ./jreleaser-${{ needs.precheck.outputs.version }}/bin/jreleaser release --select-current-platform -PoutputDir=out --dry-run
          echo "::endgroup::"
          echo "::group::➡️ prepare"
          ./jreleaser-${{ needs.precheck.outputs.version }}/bin/jreleaser prepare --select-current-platform -PoutputDir=out ${{ matrix.job.args }}
          echo "::endgroup::"
          echo "::group::➡️ package"
          ./jreleaser-${{ needs.precheck.outputs.version }}/bin/jreleaser package --select-current-platform -PoutputDir=out ${{ matrix.job.args }}
          echo "::endgroup::"
          echo "::group::➡️ publish"
          ./jreleaser-${{ needs.precheck.outputs.version }}/bin/jreleaser publish --select-current-platform -PoutputDir=out --dry-run ${{ matrix.job.args }}
          echo "::endgroup::"
          echo "::group::➡️ full-release"
          ./jreleaser-${{ needs.precheck.outputs.version }}/bin/jreleaser full-release -PoutputDir=out --select-current-platform --dry-run ${{ matrix.job.args }}
          echo "::endgroup::"
          echo "::group::➡️ announce"
          ./jreleaser-${{ needs.precheck.outputs.version }}/bin/jreleaser announce -PoutputDir=out --dry-run
          echo "::endgroup::"
          echo "::group::➡️ template generate"
          ./jreleaser-${{ needs.precheck.outputs.version }}/bin/jreleaser template generate --announcer discord
          ./jreleaser-${{ needs.precheck.outputs.version }}/bin/jreleaser template generate --assembler-type jlink --assembler-name app-standalone
          ./jreleaser-${{ needs.precheck.outputs.version }}/bin/jreleaser template generate --packager brew --distribution app
          echo "::endgroup::"
          echo "::group::➡️ init"
          ./jreleaser-${{ needs.precheck.outputs.version }}/bin/jreleaser init --overwrite --format yml
          ./jreleaser-${{ needs.precheck.outputs.version }}/bin/jreleaser init --overwrite --format toml
          ./jreleaser-${{ needs.precheck.outputs.version }}/bin/jreleaser init --overwrite --format json
          echo "::endgroup::"
          echo "::group::➡️ auto-config"
          ./jreleaser-${{ needs.precheck.outputs.version }}/bin/jreleaser release --auto-config --dry-run
          echo "::endgroup::"
        env:
          JRELEASER_OUTPUT_DIRECTORY: out
          JRELEASER_USER_HOME: ${{ github.workspace }}/smoketests-jreleaser/.jreleaser
          JRELEASER_PROJECT_VERSION: 1.0.0
          JRELEASER_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          JRELEASER_GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
          JRELEASER_GPG_PUBLIC_KEY: ${{ secrets.GPG_PUBLIC_KEY }}
          JRELEASER_GPG_SECRET_KEY: ${{ secrets.GPG_SECRET_KEY }}
          JAVA_OPTS: '-javaagent:jacoco/jacocoagent.jar=includes=*jreleaser*,destfile=jreleaser-cli-${{ runner.os }}.exec'

      - name: JReleaser output
        if: always()
        uses: actions/upload-artifact@v4
        with:
          retention-days: 7
          name: 'jreleaser-cli-${{ runner.os }}'
          path: |
            smoketests-jreleaser/out/jreleaser/trace.log
            smoketests-jreleaser/out/jreleaser/output.properties
            smoketests-jreleaser/out/jreleaser/release/CHANGELOG.md
            smoketests-jreleaser/out/jreleaser/prepare

      - name: JaCoCo upload
        if: always()
        uses: actions/upload-artifact@v4
        with:
          retention-days: 1
          name: 'jacoco-cli-${{ runner.os }}'
          path: smoketests-jreleaser/*.exec

      - name: Cleanup
        if: always()
        shell: bash
        run: |
          ./gradlew -stop
          rm -rf ~/.m2/repository/org/jreleaser
          rm -rf ~/.gradle/caches/modules-2/files-2.1/org.jreleaser          

  build-tool:
    name: 'Tool ${{ matrix.job.os }}'
    needs: [ precheck ]
    if: endsWith(${{ needs.precheck.outputs.version }}, '-SNAPSHOT')
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        job:
          - { os: macos-latest  , args: '-xp docker' }
          - { os: ubuntu-latest , args: '' }
          - { os: windows-latest, args: '-xp docker' }
    runs-on: ${{ matrix.job.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Decrypt secrets
        shell: bash
        run: sh .github/scripts/decrypt-secrets.sh

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: ${{ vars.JAVA_VERSION }}
          distribution: ${{ vars.JAVA_DISTRO }}
          cache: gradle

      - name: Build
        shell: bash
        run: ./gradlew -PreproducibleBuild=true build publishToMavenLocal -S

      - name: Checkout smoketests repository
        uses: actions/checkout@v4
        with:
          repository: jreleaser/smoketests-jreleaser
          path: smoketests-jreleaser
          fetch-depth: 0
          token: ${{ secrets.GIT_ACCESS_TOKEN }}

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: setup-java-${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Prepare
        shell: bash
        run: |
          cd smoketests-jreleaser
          cp ../plugins/jreleaser-tool-provider/build/libs/jreleaser-tool-provider-${{ needs.precheck.outputs.version }}.jar jreleaser.jar
          sed -i -e "s/0.0.0-SNAPSHOT/${{ needs.precheck.outputs.version }}/g" pom.xml
          sed -i -e "s/0.0.0-SNAPSHOT/${{ needs.precheck.outputs.version }}/g" build.xml
          sed -i -e "s/0.0.0-SNAPSHOT/${{ needs.precheck.outputs.version }}/g" gradle.properties
          sh ../.github/scripts/jacoco-instrument.sh

      - name: Setup Graal
        uses: graalvm/setup-graalvm@v1
        with:
          version: ${{ vars.GRAAL_VERSION }}
          java-version: ${{ vars.GRAAL_JAVA_VERSION }}
          github-token: ${{ secrets.GIT_ACCESS_TOKEN }}

      - name: JReleaser
        shell: bash
        run: |
          cd smoketests-jreleaser
          echo "::group::➡️ build"
          chmod +x gradlew
          ./gradlew build
          chmod +x mvnw
          ./mvnw -B -ntp deploy -DaltDeploymentRepository=local::file:./target/staging-deploy
          echo "::endgroup::"
          echo "::group::➡️ json-schema"
          java "${JAVA_OPTS}" -jar jreleaser.jar json-schema
          echo "::endgroup::"
          echo "::group::➡️ env"
          java "${JAVA_OPTS}" -jar jreleaser.jar env
          echo "::endgroup::"
          echo "::group::➡️ assemble"
          java "${JAVA_OPTS}" -jar jreleaser.jar assemble -PoutputDir=out
          echo "::endgroup::"
          echo "::group::➡️ config"
          java "${JAVA_OPTS}" -jar jreleaser.jar config -PoutputDir=out
          echo "::endgroup::"
          echo "::group::➡️ changelog"
          java "${JAVA_OPTS}" -jar jreleaser.jar changelog -PoutputDir=out
          echo "::endgroup::"
          echo "::group::➡️ download"
          java "${JAVA_OPTS}" -jar jreleaser.jar download -PoutputDir=out --dry-run
          echo "::endgroup::"
          echo "::group::➡️ catalog"
          java "${JAVA_OPTS}" -jar jreleaser.jar catalog -PoutputDir=out --select-current-platform
          echo "::endgroup::"
          echo "::group::➡️ checksum"
          java "${JAVA_OPTS}" -jar jreleaser.jar checksum -PoutputDir=out --select-current-platform
          echo "::endgroup::"
          echo "::group::➡️ sign"
          java "${JAVA_OPTS}" -jar jreleaser.jar sign -PoutputDir=out --select-current-platform
          echo "::endgroup::"
          echo "::group::➡️ deploy"
          java "${JAVA_OPTS}" -jar jreleaser.jar deploy -PoutputDir=out --dry-run
          echo "::endgroup::"
          echo "::group::➡️ upload"
          java "${JAVA_OPTS}" -jar jreleaser.jar upload --select-current-platform -PoutputDir=out --dry-run
          echo "::endgroup::"
          echo "::group::➡️ release"
          java "${JAVA_OPTS}" -jar jreleaser.jar release --select-current-platform -PoutputDir=out --dry-run
          echo "::endgroup::"
          echo "::group::➡️ prepare"
          java "${JAVA_OPTS}" -jar jreleaser.jar prepare --select-current-platform -PoutputDir=out ${{ matrix.job.args }}
          echo "::endgroup::"
          echo "::group::➡️ package"
          java "${JAVA_OPTS}" -jar jreleaser.jar package --select-current-platform -PoutputDir=out ${{ matrix.job.args }}
          echo "::endgroup::"
          echo "::group::➡️ publish"
          java "${JAVA_OPTS}" -jar jreleaser.jar publish --select-current-platform -PoutputDir=out --dry-run ${{ matrix.job.args }}
          echo "::endgroup::"
          echo "::group::➡️ full-release"
          java "${JAVA_OPTS}" -jar jreleaser.jar full-release -PoutputDir=out --select-current-platform --dry-run ${{ matrix.job.args }}
          echo "::endgroup::"
          echo "::group::➡️ announce"
          java "${JAVA_OPTS}" -jar jreleaser.jar announce -PoutputDir=out --dry-run
          echo "::endgroup::"
          echo "::group::➡️ template generate"
          java "${JAVA_OPTS}" -jar jreleaser.jar template generate --announcer discord
          java "${JAVA_OPTS}" -jar jreleaser.jar template generate --assembler-type jlink --assembler-name app-standalone
          java "${JAVA_OPTS}" -jar jreleaser.jar template generate --packager brew --distribution app
          echo "::endgroup::"
          echo "::group::➡️ init"
          java "${JAVA_OPTS}" -jar jreleaser.jar init --overwrite --format yml
          java "${JAVA_OPTS}" -jar jreleaser.jar init --overwrite --format toml
          java "${JAVA_OPTS}" -jar jreleaser.jar init --overwrite --format json
          echo "::endgroup::"
          echo "::group::➡️ auto-config"
          java "${JAVA_OPTS}" -jar jreleaser.jar release --auto-config --dry-run
          echo "::endgroup::"
        env:
          JRELEASER_OUTPUT_DIRECTORY: out
          JRELEASER_USER_HOME: ${{ github.workspace }}/smoketests-jreleaser/.jreleaser
          JRELEASER_PROJECT_VERSION: 1.0.0
          JRELEASER_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          JRELEASER_GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
          JRELEASER_GPG_PUBLIC_KEY: ${{ secrets.GPG_PUBLIC_KEY }}
          JRELEASER_GPG_SECRET_KEY: ${{ secrets.GPG_SECRET_KEY }}
          JAVA_OPTS: '-javaagent:jacoco/jacocoagent.jar=includes=*jreleaser*,destfile=jreleaser-tool-${{ runner.os }}.exec'

      - name: JReleaser output
        if: always()
        uses: actions/upload-artifact@v4
        with:
          retention-days: 7
          name: 'jreleaser-tool-${{ runner.os }}'
          path: |
            smoketests-jreleaser/out/jreleaser/trace.log
            smoketests-jreleaser/out/jreleaser/output.properties
            smoketests-jreleaser/out/jreleaser/release/CHANGELOG.md
            smoketests-jreleaser/out/jreleaser/prepare

      - name: JaCoCo upload
        if: always()
        uses: actions/upload-artifact@v4
        with:
          retention-days: 1
          name: 'jacoco-tool-${{ runner.os }}'
          path: smoketests-jreleaser/*.exec

      - name: Cleanup
        if: always()
        shell: bash
        run: |
          ./gradlew -stop
          rm -rf ~/.m2/repository/org/jreleaser
          rm -rf ~/.gradle/caches/modules-2/files-2.1/org.jreleaser

  build-ant:
    name: 'Ant ${{ matrix.job.os }}'
    needs: [ precheck ]
    if: endsWith(${{ needs.precheck.outputs.version }}, '-SNAPSHOT')
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        job:
          - { os: macos-latest  , args: '-Djreleaser.excluded.packagers=docker' }
          - { os: ubuntu-latest , args: '' }
          - { os: windows-latest, args: '-Djreleaser.excluded.packagers=docker' }
    runs-on: ${{ matrix.job.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Decrypt secrets
        shell: bash
        run: sh .github/scripts/decrypt-secrets.sh

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: ${{ vars.JAVA_VERSION }}
          distribution: ${{ vars.JAVA_DISTRO }}
          cache: gradle

      - name: Build
        shell: bash
        run: ./gradlew -PreproducibleBuild=true build publishToMavenLocal -S

      - name: Checkout smoketests repository
        uses: actions/checkout@v4
        with:
          repository: jreleaser/smoketests-jreleaser
          path: smoketests-jreleaser
          fetch-depth: 0
          token: ${{ secrets.GIT_ACCESS_TOKEN }}

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: setup-java-${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Prepare
        shell: bash
        run: |
          cd smoketests-jreleaser
          mkdir lib
          unzip -dlib -qo ../plugins/jreleaser-ant-tasks/build/distributions/jreleaser-ant-tasks-${{ needs.precheck.outputs.version }}.zip
          sed -i -e "s/0.0.0-SNAPSHOT/${{ needs.precheck.outputs.version }}/g" pom.xml
          sed -i -e "s/0.0.0-SNAPSHOT/${{ needs.precheck.outputs.version }}/g" build.xml
          sed -i -e "s/0.0.0-SNAPSHOT/${{ needs.precheck.outputs.version }}/g" gradle.properties
          sh ../.github/scripts/jacoco-instrument.sh

      - name: Setup Graal
        uses: graalvm/setup-graalvm@v1
        with:
          version: ${{ vars.GRAAL_VERSION }}
          java-version: ${{ vars.GRAAL_JAVA_VERSION }}
          github-token: ${{ secrets.GIT_ACCESS_TOKEN }}

      - name: JReleaser
        shell: bash
        run: |
          cd smoketests-jreleaser
          echo "::group::➡️ build"
          chmod +x gradlew
          ./gradlew build
          chmod +x mvnw
          ./mvnw -B -ntp deploy -DaltDeploymentRepository=local::file:./target/staging-deploy
          echo "::endgroup::"
          echo "::group::➡️ json-schema"
          ant jreleaser-json-schema
          echo "::endgroup::"
          echo "::group::➡️ env"
          ant jreleaser-env
          echo "::endgroup::"
          echo "::group::➡️ assemble"
          ant jreleaser-assemble -DoutputDir=build
          echo "::endgroup::"
          echo "::group::➡️ config"
          ant jreleaser-config -DoutputDir=build
          echo "::endgroup::"
          echo "::group::➡️ changelog"
          ant jreleaser-changelog -DoutputDir=build
          echo "::endgroup::"
          echo "::group::➡️ download"
          ant jreleaser-download -DoutputDir=build -Djreleaser.dry.run=true
          echo "::endgroup::"
          echo "::group::➡️ catalog"
          ant jreleaser-catalog -DoutputDir=build -Djreleaser.select.current.platform=true
          echo "::endgroup::"
          echo "::group::➡️ checksum"
          ant jreleaser-checksum -DoutputDir=build -Djreleaser.select.current.platform=true
          echo "::endgroup::"
          echo "::group::➡️ sign"
          ant jreleaser-sign -DoutputDir=build -Djreleaser.select.current.platform=true
          echo "::endgroup::"
          echo "::group::➡️ deploy"
          ant jreleaser-deploy -DoutputDir=build -Djreleaser.dry.run=true
          echo "::endgroup::"
          echo "::group::➡️ upload"
          ant jreleaser-upload -DoutputDir=build -Djreleaser.select.current.platform=true -Djreleaser.dry.run=true
          echo "::endgroup::"
          echo "::group::➡️ release"
          ant jreleaser-release -DoutputDir=build -Djreleaser.select.current.platform=true -Djreleaser.dry.run=true
          echo "::endgroup::"
          echo "::group::➡️ prepare"
          ant jreleaser-prepare -DoutputDir=build -Djreleaser.select.current.platform=true ${{ matrix.job.args }}
          echo "::endgroup::"
          echo "::group::➡️ package"
          ant jreleaser-package -DoutputDir=build -Djreleaser.select.current.platform=true ${{ matrix.job.args }} 
          echo "::endgroup::"
          echo "::group::➡️ publish"
          ant jreleaser-publish -DoutputDir=build -Djreleaser.select.current.platform=true -Djreleaser.dry.run=true ${{ matrix.job.args }} 
          echo "::endgroup::"
          echo "::group::➡️ full-release"
          ant jreleaser-full-release -DoutputDir=build -Djreleaser.select.current.platform=true -Djreleaser.dry.run=true ${{ matrix.job.args }} 
          echo "::endgroup::"
          echo "::group::➡️ announce"
          ant jreleaser-announce -DoutputDir=build -Djreleaser.dry.run=true
          echo "::endgroup::"
          echo "::group::➡️ template generate"
          ant jreleaser-template-generate -Djreleaser.announcer.name=discord
          ant jreleaser-template-generate -Djreleaser.assembler.type=jlink -Djreleaser.assembler.name=app-standalone
          ant jreleaser-template-generate -Djreleaser.packager.name=brew -Djreleaser.distribution.name=app
          echo "::endgroup::"
          echo "::group::➡️ init"
          ant jreleaser-init -Djreleaser.overwrite=true -Djreleaser.format=yml
          ant jreleaser-init -Djreleaser.overwrite=true -Djreleaser.format=toml
          ant jreleaser-init -Djreleaser.overwrite=true -Djreleaser.format=json
          echo "::endgroup::"
        env:
          JRELEASER_OUTPUT_DIRECTORY: out
          JRELEASER_USER_HOME: ${{ github.workspace }}/smoketests-jreleaser/.jreleaser
          JRELEASER_PROJECT_VERSION: 1.0.0
          JRELEASER_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          JRELEASER_GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
          JRELEASER_GPG_PUBLIC_KEY: ${{ secrets.GPG_PUBLIC_KEY }}
          JRELEASER_GPG_SECRET_KEY: ${{ secrets.GPG_SECRET_KEY }}
          ANT_OPTS: '-javaagent:jacoco/jacocoagent.jar=includes=*jreleaser*,destfile=jreleaser-ant-${{ runner.os }}.exec'

      - name: JReleaser output
        if: always()
        uses: actions/upload-artifact@v4
        with:
          retention-days: 7
          name: 'jreleaser-ant-${{ runner.os }}'
          path: |
            smoketests-jreleaser/build/jreleaser/trace.log
            smoketests-jreleaser/build/jreleaser/output.properties
            smoketests-jreleaser/build/jreleaser/release/CHANGELOG.md
            smoketests-jreleaser/build/jreleaser/prepare

      - name: JaCoCo upload
        if: always()
        uses: actions/upload-artifact@v4
        with:
          retention-days: 1
          name: 'jacoco-ant-${{ runner.os }}'
          path: smoketests-jreleaser/*.exec

      - name: Cleanup
        if: always()
        shell: bash
        run: |
          ./gradlew -stop
          rm -rf ~/.m2/repository/org/jreleaser
          rm -rf ~/.gradle/caches/modules-2/files-2.1/org.jreleaser

  build-gradle:
    name: 'Gradle ${{ matrix.job.os }}'
    needs: [ precheck ]
    if: endsWith(${{ needs.precheck.outputs.version }}, '-SNAPSHOT')
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        job:
          - { os: macos-latest  , args: '--exclude-packager docker' }
          - { os: ubuntu-latest , args: '' }
          - { os: windows-latest, args: '--exclude-packager docker' }
    runs-on: ${{ matrix.job.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Decrypt secrets
        shell: bash
        run: sh .github/scripts/decrypt-secrets.sh

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: ${{ vars.JAVA_VERSION }}
          distribution: ${{ vars.JAVA_DISTRO }}
          cache: gradle

      - name: Build
        shell: bash
        run: ./gradlew -PreproducibleBuild=true build publishToMavenLocal -S

      - name: Checkout smoketests repository
        uses: actions/checkout@v4
        with:
          repository: jreleaser/smoketests-jreleaser
          path: smoketests-jreleaser
          fetch-depth: 0
          token: ${{ secrets.GIT_ACCESS_TOKEN }}

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: setup-java-${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Prepare
        shell: bash
        run: |
          cd smoketests-jreleaser
          sed -i -e "s/0.0.0-SNAPSHOT/${{ needs.precheck.outputs.version }}/g" pom.xml
          sed -i -e "s/0.0.0-SNAPSHOT/${{ needs.precheck.outputs.version }}/g" build.xml
          sed -i -e "s/0.0.0-SNAPSHOT/${{ needs.precheck.outputs.version }}/g" gradle.properties
          sh ../.github/scripts/jacoco-instrument.sh

      - name: Setup Graal
        uses: graalvm/setup-graalvm@v1
        with:
          version: ${{ vars.GRAAL_VERSION }}
          java-version: ${{ vars.GRAAL_JAVA_VERSION }}
          github-token: ${{ secrets.GIT_ACCESS_TOKEN }}

      - name: JReleaser
        shell: bash
        run: |
          cd smoketests-jreleaser
          echo "::group::➡️ build"
          chmod +x gradlew
          ./gradlew build
          chmod +x mvnw
          ./mvnw -B -ntp deploy -DaltDeploymentRepository=local::file:./target/staging-deploy
          ./gradlew jreleaserJsonSchema -S
          echo "::endgroup::"
          echo "::group::➡️ env"
          ./gradlew jreleaserEnv -S
          echo "::endgroup::"
          echo "::group::➡️ assemble"
          ./gradlew jreleaserAssemble -PoutputDir=build -S
          echo "::endgroup::"
          echo "::group::➡️ config"
          ./gradlew jreleaserConfig -PoutputDir=build -S
          echo "::endgroup::"
          echo "::group::➡️ changelog"
          ./gradlew jreleaserChangelog -PoutputDir=build -S
          echo "::endgroup::"
          echo "::group::➡️ download"
          ./gradlew jreleaserDownload -PoutputDir=build -S
          echo "::endgroup::"
          echo "::group::➡️ catalog"
          ./gradlew jreleaserCatalog -PoutputDir=build --select-current-platform -S
          echo "::endgroup::"
          echo "::group::➡️ checksum"
          ./gradlew jreleaserChecksum -PoutputDir=build --select-current-platform -S
          echo "::endgroup::"
          echo "::group::➡️ sign"
          ./gradlew jreleaserSign -PoutputDir=build --select-current-platform -S
          echo "::endgroup::"
          echo "::group::➡️ deploy"
          ./gradlew jreleaserDeploy -PoutputDir=build -S
          echo "::endgroup::"
          echo "::group::➡️ upload"
          ./gradlew jreleaserUpload -PoutputDir=build --select-current-platform -S
          echo "::endgroup::"
          echo "::group::➡️ release"
          ./gradlew jreleaserRelease -PoutputDir=build --select-current-platform -S
          echo "::endgroup::"
          echo "::group::➡️ prepare"
          ./gradlew jreleaserPrepare -PoutputDir=build --select-current-platform  ${{ matrix.job.args }} -S
          echo "::endgroup::"
          echo "::group::➡️ package"
          ./gradlew jreleaserPackage -PoutputDir=build --select-current-platform  ${{ matrix.job.args }} -S
          echo "::endgroup::"
          echo "::group::➡️ publish"
          ./gradlew jreleaserPublish -PoutputDir=build --select-current-platform  ${{ matrix.job.args }} -S
          echo "::endgroup::"
          echo "::group::➡️ full-release"
          ./gradlew jreleaserFullRelease -PoutputDir=build --select-current-platform  ${{ matrix.job.args }} -S
          echo "::endgroup::"
          echo "::group::➡️ announce"
          ./gradlew jreleaserAnnounce -PoutputDir=build -S
          echo "::endgroup::"
          echo "::group::➡️ template generate"
          ./gradlew jreleaserTemplateGenerate -S --announcer-name discord
          ./gradlew jreleaserTemplateGenerate -S --assembler-type jlink --assembler-name app-standalone
          ./gradlew jreleaserTemplateGenerate -S --packager-name brew --distribution-name app
          echo "::endgroup::"
          echo "::group::➡️ init"
          ./gradlew jreleaserInit -S --overwrite --format yml
          ./gradlew jreleaserInit -S --overwrite --format toml
          ./gradlew jreleaserInit -S --overwrite --format json
          echo "::endgroup::"
          echo "::group::➡️ auto-config"
          ./gradlew jreleaserAutoConfigRelease -S
          echo "::endgroup::"
        env:
          JRELEASER_OUTPUT_DIRECTORY: out
          JRELEASER_USER_HOME: ${{ github.workspace }}/smoketests-jreleaser/.jreleaser
          JRELEASER_PROJECT_VERSION: 1.0.0
          JRELEASER_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          JRELEASER_GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
          JRELEASER_GPG_PUBLIC_KEY: ${{ secrets.GPG_PUBLIC_KEY }}
          JRELEASER_GPG_SECRET_KEY: ${{ secrets.GPG_SECRET_KEY }}
          JAVA_OPTS: '-javaagent:jacoco/jacocoagent.jar=includes=*jreleaser*,destfile=jreleaser-gradle-${{ runner.os }}.exec'

      - name: JReleaser output
        if: always()
        uses: actions/upload-artifact@v4
        with:
          retention-days: 7
          name: 'jreleaser-gradle-${{ runner.os }}'
          path: |
            smoketests-jreleaser/build/jreleaser/trace.log
            smoketests-jreleaser/build/jreleaser/output.properties
            smoketests-jreleaser/build/jreleaser/release/CHANGELOG.md
            smoketests-jreleaser/build/jreleaser/prepare

      - name: JaCoCo upload
        if: always()
        uses: actions/upload-artifact@v4
        with:
          retention-days: 1
          name: 'jacoco-gradle-${{ runner.os }}'
          path: smoketests-jreleaser/*.exec

      - name: Clean
        shell: bash
        run: |
          cd smoketests-jreleaser
          ./gradlew clean -S
        env:
          JRELEASER_USER_HOME: ${{ github.workspace }}/smoketests-jreleaser/.jreleaser
          JRELEASER_PROJECT_VERSION: 1.0.0
          JRELEASER_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          JRELEASER_GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
          JRELEASER_GPG_PUBLIC_KEY: ${{ secrets.GPG_PUBLIC_KEY }}
          JRELEASER_GPG_SECRET_KEY: ${{ secrets.GPG_SECRET_KEY }}

      - name: Cleanup
        if: always()
        shell: bash
        run: |
          ./gradlew -stop
          rm -rf ~/.m2/repository/org/jreleaser
          rm -rf ~/.gradle/caches/modules-2/files-2.1/org.jreleaser

  build-maven:
    name: 'Maven ${{ matrix.job.os }}'
    needs: [ precheck ]
    if: endsWith(${{ needs.precheck.outputs.version }}, '-SNAPSHOT')
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        job:
          - { os: macos-latest  , args: '-Djreleaser.excluded.packagers=docker' }
          - { os: ubuntu-latest , args: '' }
          - { os: windows-latest, args: '-Djreleaser.excluded.packagers=docker' }
    runs-on: ${{ matrix.job.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Decrypt secrets
        shell: bash
        run: sh .github/scripts/decrypt-secrets.sh

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: ${{ vars.JAVA_VERSION }}
          distribution: ${{ vars.JAVA_DISTRO }}
          cache: gradle

      - name: Build
        shell: bash
        run: ./gradlew -PreproducibleBuild=true build publishToMavenLocal -S

      - name: Checkout smoketests repository
        uses: actions/checkout@v4
        with:
          repository: jreleaser/smoketests-jreleaser
          path: smoketests-jreleaser
          fetch-depth: 0
          token: ${{ secrets.GIT_ACCESS_TOKEN }}

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: setup-java-${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Prepare
        shell: bash
        run: |
          cd smoketests-jreleaser
          sed -i -e "s/0.0.0-SNAPSHOT/${{ needs.precheck.outputs.version }}/g" pom.xml
          sed -i -e "s/0.0.0-SNAPSHOT/${{ needs.precheck.outputs.version }}/g" build.xml
          sed -i -e "s/0.0.0-SNAPSHOT/${{ needs.precheck.outputs.version }}/g" gradle.properties
          sh ../.github/scripts/jacoco-instrument.sh

      - name: Setup Graal
        uses: graalvm/setup-graalvm@v1
        with:
          version: ${{ vars.GRAAL_VERSION }}
          java-version: ${{ vars.GRAAL_JAVA_VERSION }}
          github-token: ${{ secrets.GIT_ACCESS_TOKEN }}

      - name: JReleaser
        shell: bash
        run: |
          cd smoketests-jreleaser
          echo "::group::➡️ build"
          chmod +x gradlew
          ./gradlew build
          chmod +x mvnw
          ./mvnw -B -ntp deploy -DaltDeploymentRepository=local::file:./target/staging-deploy
          echo "::endgroup::"
          echo "::group::➡️ json-schema"
          ./mvnw -B -ntp jreleaser:json-schema
          echo "::endgroup::"
          echo "::group::➡️ env"
          ./mvnw -B -ntp jreleaser:env
          echo "::endgroup::"
          echo "::group::➡️ assemble"
          ./mvnw -B -ntp jreleaser:assemble -DoutputDir=target
          echo "::endgroup::"
          echo "::group::➡️ config"
          ./mvnw -B -ntp jreleaser:config -DoutputDir=target
          echo "::endgroup::"
          echo "::group::➡️ changelog"
          ./mvnw -B -ntp jreleaser:changelog -DoutputDir=target
          echo "::endgroup::"
          echo "::group::➡️ download"
          ./mvnw -B -ntp jreleaser:download -DoutputDir=target -Djreleaser.dry.run=true
          echo "::endgroup::"
          echo "::group::➡️ catalog"
          ./mvnw -B -ntp jreleaser:catalog -DoutputDir=target -Djreleaser.select.current.platform=true
          echo "::endgroup::"
          echo "::group::➡️ checksum"
          ./mvnw -B -ntp jreleaser:checksum -DoutputDir=target -Djreleaser.select.current.platform=true
          echo "::endgroup::"
          echo "::group::➡️ sign"
          ./mvnw -B -ntp jreleaser:sign -DoutputDir=target -Djreleaser.select.current.platform=true
          echo "::endgroup::"
          echo "::group::➡️ deploy"
          ./mvnw -B -ntp jreleaser:deploy -DoutputDir=target -Djreleaser.dry.run=true
          echo "::endgroup::"
          echo "::group::➡️ upload"
          ./mvnw -B -ntp jreleaser:upload -DoutputDir=target -Djreleaser.select.current.platform=true -Djreleaser.dry.run=true
          echo "::endgroup::"
          echo "::group::➡️ release"
          ./mvnw -B -ntp jreleaser:release -DoutputDir=target -Djreleaser.select.current.platform=true -Djreleaser.dry.run=true
          echo "::endgroup::"
          echo "::group::➡️ prepare"
          ./mvnw -B -ntp jreleaser:prepare -DoutputDir=target -Djreleaser.select.current.platform=true ${{ matrix.job.args }}
          echo "::endgroup::"
          echo "::group::➡️ package"
          ./mvnw -B -ntp jreleaser:package -DoutputDir=target -Djreleaser.select.current.platform=true ${{ matrix.job.args }}
          echo "::endgroup::"
          echo "::group::➡️ publish"
          ./mvnw -B -ntp jreleaser:publish -DoutputDir=target -Djreleaser.select.current.platform=true -Djreleaser.dry.run=true ${{ matrix.job.args }}
          echo "::endgroup::"
          echo "::group::➡️ full-release"
          ./mvnw -B -ntp jreleaser:full-release -DoutputDir=target -Djreleaser.select.current.platform=true -Djreleaser.dry.run=true ${{ matrix.job.args }}
          echo "::endgroup::"
          echo "::group::➡️ announce"
          ./mvnw -B -ntp jreleaser:announce -DoutputDir=target -Djreleaser.dry.run=true
          echo "::endgroup::"
          echo "::group::➡️ template generate"
          ./mvnw -B -ntp jreleaser:template-generate -Djreleaser.announcer.name=discord
          ./mvnw -B -ntp jreleaser:template-generate -Djreleaser.assembler.type=jlink -Djreleaser.assembler.name=app-standalone
          ./mvnw -B -ntp jreleaser:template-generate -Djreleaser.template.packager.name=brew -Djreleaser.template.distribution.name=app
          echo "::endgroup::"
          echo "::group::➡️ init"
          ./mvnw -B -ntp jreleaser:init -Djreleaser.template.overwrite=true -Djreleaser.init.format=yml
          ./mvnw -B -ntp jreleaser:init -Djreleaser.template.overwrite=true -Djreleaser.init.format=toml
          ./mvnw -B -ntp jreleaser:init -Djreleaser.template.overwrite=true -Djreleaser.init.format=json
          echo "::endgroup::"
          echo "::group::➡️ auto-config"
          ./mvnw -B -ntp jreleaser:auto-config-release -Djreleaser.dry.run=true
          echo "::endgroup::"
        env:
          JRELEASER_OUTPUT_DIRECTORY: out
          JRELEASER_USER_HOME: ${{ github.workspace }}/smoketests-jreleaser/.jreleaser
          JRELEASER_PROJECT_VERSION: 1.0.0
          JRELEASER_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          JRELEASER_GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
          JRELEASER_GPG_PUBLIC_KEY: ${{ secrets.GPG_PUBLIC_KEY }}
          JRELEASER_GPG_SECRET_KEY: ${{ secrets.GPG_SECRET_KEY }}
          MAVEN_OPTS: '-javaagent:jacoco/jacocoagent.jar=includes=*jreleaser*,destfile=jreleaser-maven-${{ runner.os }}.exec'

      - name: JReleaser output
        if: always()
        uses: actions/upload-artifact@v4
        with:
          retention-days: 7
          name: 'jreleaser-maven-${{ runner.os }}'
          path: |
            smoketests-jreleaser/target/jreleaser/trace.log
            smoketests-jreleaser/target/jreleaser/output.properties
            smoketests-jreleaser/target/jreleaser/release/CHANGELOG.md
            smoketests-jreleaser/target/jreleaser/prepare

      - name: JaCoCo upload
        if: always()
        uses: actions/upload-artifact@v4
        with:
          retention-days: 1
          name: 'jacoco-maven-${{ runner.os }}'
          path: smoketests-jreleaser/*.exec

      - name: Cleanup
        if: always()
        shell: bash
        run: |
          ./gradlew -stop
          rm -rf ~/.m2/repository/org/jreleaser
          rm -rf ~/.gradle/caches/modules-2/files-2.1/org.jreleaser

  unit-tests:
    name: 'Unit Test ${{ matrix.os }}'
    needs: [ precheck ]
    if: endsWith(${{ needs.precheck.outputs.version }}, '-SNAPSHOT')
    continue-on-error: true
    strategy:
      fail-fast: true
      matrix:
        os: [ubuntu-latest, macOS-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - name: Decrypt secrets
        shell: bash
        run: sh .github/scripts/decrypt-secrets.sh

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: ${{ vars.JAVA_VERSION }}
          distribution: ${{ vars.JAVA_DISTRO }}
          cache: gradle

      - name: Test
        shell: bash
        run: |
          ./gradlew check jacocoTestReport --no-build-cache
          ./gradlew :aggregateJacocoReport

      - name: Rename JaCoCo execution data
        shell: bash
        run: |
          for execFile in $(find ./ -name "*.exec" -print); do
              jacoco=$(dirname "$execFile")
              build=$(dirname "$jacoco")
              project=$(dirname "$build")
              projectName=$(basename "$project")
              mv "$execFile" "${projectName}-${{ runner.os }}.exec"
          done
          for execFile in $(find ./ -name "*.exec" -print); do echo "$execFile"; done

      - name: JaCoCo upload
        if: always()
        uses: actions/upload-artifact@v4
        with:
          retention-days: 1
          name: 'jacoco-${{ runner.os }}'
          path: '*.exec'

      - name: Cleanup
        if: always()
        shell: bash
        run: |
          ./gradlew -stop
          rm -rf ~/.gradle/caches/build-cache-1

  coveralls:
    name: Coveralls
    needs: [ precheck, build-cli, build-tool, build-ant, build-gradle, build-maven, unit-tests ]
    if: endsWith(${{ needs.precheck.outputs.version }}, '-SNAPSHOT')
    continue-on-error: true
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Decrypt secrets
        shell: bash
        run: sh .github/scripts/decrypt-secrets.sh

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: ${{ vars.JAVA_VERSION }}
          distribution: ${{ vars.JAVA_DISTRO }}
          cache: gradle

      - name: Build
        run: ./gradlew classes
        
      - name: Download JaCoCo execution data
        uses: actions/download-artifact@v4
        with:
          pattern: jacoco-*
          merge-multiple: true
          path: jacoco

      - name: JaCoCo merge
        run: sh .github/scripts/jacoco-merge.sh

      - name: JaCoCo report
        run: sh .github/scripts/jacoco-report.sh

      - name: Upload coverage to Coveralls
        env:
          COVERALLS_REPO_TOKEN: ${{ secrets.COVERALLS_TOKEN }}
        run: ./gradlew :coveralls

      - name: Cleanup
        if: always()
        shell: bash
        run: |
          rm -rf ~/.gradle/caches/build-cache-1
          ./gradlew -stop

  codecov:
    name: Codecov
    needs: [ precheck, build-cli, build-tool, build-ant, build-gradle, build-maven, unit-tests ]
    if: endsWith(${{ needs.precheck.outputs.version }}, '-SNAPSHOT')
    continue-on-error: true
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Decrypt secrets
        shell: bash
        run: sh .github/scripts/decrypt-secrets.sh

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: ${{ vars.JAVA_VERSION }}
          distribution: ${{ vars.JAVA_DISTRO }}
          cache: gradle

      - name: Build
        run: ./gradlew classes

      - name: Download JaCoCo execution data
        uses: actions/download-artifact@v4
        with:
          pattern: jacoco-*
          merge-multiple: true
          path: jacoco

      - name: JaCoCo merge
        run: sh .github/scripts/jacoco-merge.sh

      - name: JaCoCo report
        run: sh .github/scripts/jacoco-report.sh

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: build/reports/jacoco/aggregate/jacocoTestReport.xml
          flags: smoke-tests
          fail_ci_if_error: false
          name: jreleaser-smoke-tests
          verbose: true

      - name: Cleanup
        if: always()
        shell: bash
        run: |
          rm -rf ~/.gradle/caches/build-cache-1
          ./gradlew -stop

  sonar:
    name: Sonar
    needs: [ precheck, build-cli, build-tool, build-ant, build-gradle, build-maven, unit-tests ]
    if: endsWith(${{ needs.precheck.outputs.version }}, '-SNAPSHOT')
    continue-on-error: true
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Decrypt secrets
        shell: bash
        run: sh .github/scripts/decrypt-secrets.sh

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: ${{ vars.JAVA_VERSION }}
          distribution: ${{ vars.JAVA_DISTRO }}
          cache: gradle

      - name: Build
        run: ./gradlew check -PspotbugsEnabled=true

      - name: Download JaCoCo execution data
        uses: actions/download-artifact@v4
        with:
          pattern: jacoco-*
          merge-multiple: true
          path: jacoco

      - name: JaCoCo merge
        run: sh .github/scripts/jacoco-merge.sh

      - name: JaCoCo report
        run: sh .github/scripts/jacoco-report.sh

      - name: Sonar
        run: |
          ./gradlew sonarqube -Dsonar.login=${{ secrets.SONARCLOUD_TOKEN }} -PsonarEnabled=true

      - name: Cleanup
        if: always()
        shell: bash
        run: |
          rm -rf ~/.gradle/caches/build-cache-1
          ./gradlew -stop
