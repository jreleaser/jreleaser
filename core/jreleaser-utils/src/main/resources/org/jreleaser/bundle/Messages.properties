#
# SPDX-License-Identifier: Apache-2.0
#
# Copyright 2020-2021 The JReleaser authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

###############################################################################
# TRANSLATIONS NOTES:
# - please respect the capitalization of the first word
# - DSL property names must remain as is, e.g, 'basedir'
# - do not translate 'false', 'true'
###############################################################################

yes = yes
no  = no
not = not

ERROR_unexpected_error = Unexpected error

ERROR_context_creator_parse_configuration         = Unexpected error when parsing configuration from {}
context.creator.reading_configuration             = Reading configuration
context.creator.report.project-version            = Project version set to {}
context.creator.report.release                    = Release is{}snapshot
context.creator.report.timestamp                  = Timestamp is {}
context.creator.report.head                       = HEAD is at {}
context.configurer.auto-config.on                 = Auto configure is ON
# do not translate basedir
context.configurer.basedir.set                    = - basedir set to {}
ERROR_context_configurer_unsupported_url          = Auto configuration does not support {}
# do not translate release.updateSections, release.update
ERROR_context_configurer_update_not_set           = release.updateSections is set but release.update is false
ERROR_context_configurer_fail_git_head            = Could not determine git HEAD
ERROR_context_configurer_fail_git_remote          = Could not determine remote
ERROR_context_configurer_jreleaser_misconfigured  = JReleaser has not been properly configured.
ERROR_context_configurer_detected_git             = Auto configure detected {} but project has {} configured
ERROR_version_parse                               = Cannot parse version '{}'
ERROR_unsupported_algorithm                       = Unsupported algorithm {}

announcers.header              = Announcing release
announcers.not.enabled         = Announcing is not enabled. Skipping
announcers.not.configured      = No announcers have been configured. Skipping
announcers.announcer.not.found = Announcer [{}] not found. Skipping
announcers.announcer.disabled  = disabled. Skipping
ERROR_unsupported_announcer    = Unsupported announcer {}
ERROR_announcer_not_configured = Announcer {} has not been configured

assemblers.not.enabled                     = Assembling is not enabled. Skipping
assemblers.no.match                        = No assemblers match {}
assemblers.distribution.not.configured     = Distribution {} is not configured for assembling with {}
assemblers.assemble.distribution.with      = Assembling {} distribution with {}
assemblers.assemble.distribution.with.all  = Assembling {} distribution with all assemblers
assemblers.assemble.all.distributions.with = Assembling all distributions with {}
assemblers.assemble.all.distributions      = Assembling all distributions
assemblers.distribution.skip               = skipping for {} distribution
assemblers.distribution.assemble           = assembling {} distribution
ERROR_unsupported_assembler                = Unsupported assembler {}

ERROR_unexpected_error_changelog = Unexpected error when creating changelog
ERROR_cannot_read_changelog      = Can not read changelog from {}

checksum.header                           = Calculating checksums
checksum.not.enabled                      = No files configured for checksum. Skipping
checksum.not.exist                        = checksum does not exist: {}
checksum.file.newer                       = {} is newer than {}
checksum.reading                          = reading {}
ERROR_unexpected_error_checksum           = Unexpected error writing checksums to {}
ERROR_artifact_does_not_exist             = Artifact does not exist. {}
ERROR_unexpected_error_hash_read          = Unexpected error when reading hash from {}
ERROR_unexpected_error_calculate_checksum = Unexpected error calculating checksum for {}

distributions.not.enabled                  = No active distributions [{}]. Skipping
distributions.no.match                     = Distribution {} does not exist
distributions.apply.action                 = {} distributions
distributions.apply.action.to              = - {} {} distribution
distributions.skip.distribution            = skipping for {} distribution
distributions.not.supported.distribution   = distribution {} with type {} is not supported. Skipping
distributions.action.preparing.capitalize  = Preparing
distributions.action.packaging.capitalize  = Packaging
distributions.action.publishing.capitalize = Publishing
distributions.action.preparing             = preparing
distributions.action.packaging             = packaging
distributions.action.publishing            = publishing
distributions.apply.action.distribution    = {} {} distribution
distributions.failure                      = failure: {}
distributions.previous.failure             = skipping due to previous failure
ERROR_unsupported_tool                     = Unsupported tool {}

ERROR_releaser_no_match = No suitable git releaser has been configured

signing.header                       = Signing files
signing.not.enabled                  = Signing is not enabled. Skipping
signing.no.match                     = No files configured for signing. Skipping
signing.up.to.date                   = All signatures are up-to-date and valid. Skipping
signing.verify.signatures            = verifying {} signatures
signing.signing.files                = signing {} files into {}
signing.signature.not.exist          = signature does not exist: {}
signing.file.newer                   = {} is newer than {}
ERROR_signing_verify_file            = Could not verify file {} with signature {}
ERROR_signing_verify_signature       = Error when verifying signature of {}
ERROR_signing_create_signature_dir   = Could not create signatures directory
ERROR_unexpected_error_signature_gen = Unexpected error when initializing signature generator
ERROR_unexpected_error_signing       = Unexpected error when signing
ERROR_public_key_not_found           = Did not find public key for signing

uploaders.not.enabled               = Uploading is not enabled. Skipping
uploaders.no.match                  = No uploaders match {}
uploaders.uploader.not.configured   = Uploader {}/{} is not configured
uploaders.upload.with               = Uploading with {}/{}
uploaders.upload.all.artifacts.with = Uploading all artifacts with {}
uploaders.upload.all.artifacts.to   = Uploading all artifacts to {}
uploaders.upload.all.artifacts      = Uploading all artifacts
uploaders.skip.upload               = skipping upload for {0
uploaders.upload.to                 = uploading to {}
ERROR_unsupported_uploader          = Unsupported uploader {}

tool.create.properties              = creating props for {}/{}
tool.skip.distribution              = skipping {} distribution
ERROR_copy_files_from_to            = Could not copy files from {} to {}
ERROR_unexpected_copy_files_from_to = Unexpected error when copying files from {} to {}
tool.no.matching.artifacts          = no suitable artifacts found in distribution {} to be packaged with {}
tool.fill.distribution.properties   = filling distribution properties into props
tool.fill.git.properties            = filling git properties into props
tool.fill.artifact.properties       = filling artifact properties into props
tool.fill.tool.properties           = filling tool properties into props
tool.resolve.templates              = resolving templates for {}/{}
tool.evaluate.template              = evaluating template {} for {}/{}
tool.write.template                 = writing template {} for {}/{}
tool.write.file                     = writing file {} for {}/{}
tool.copy.license                   = copying license files

ERROR_brew_multiplatform_artifacts       = There are no matching multi-platform binaries
ERROR_tool_requires_platform             = must run on {}
ERROR_tool_excludes_platform             = must not run on {}
ERROR_tool_local_build_unsupported       = local build is not yet supported
ERROR_tool_local_publication_unsupported = local publication is not yet supported
dryrun.set                               = dryrun is set to true. Skipping
docker.no.registries                     = no configured registries. Skipping
docker.login                             = login into {}{}
docker.tag                               = tagging {} as {}
docker.push                              = pushing {} to {}{}
docker.logout                            = logout from {}{}
sdkman.no.artifacts.match                = Artifact {} is not suitable for Sdkman publication. Skipping
sdkman.artifact.explicit.skip            = Artifact {} is explicitly skipped
sdkman.platform.replacement              = Platform {}: {} will replace {}
sdkman.publish.major                     = publishing major release of '{}' candidate
sdkman.publish.minor                     = publishing minor release of '{}' candidate

assembler.fill.assembler.properties        = filling assembler properties into props
ERROR_unexpected_error_writing_file        = Unexpected error when writing to {}
ERROR_command_execution_exit_value         = Command execution error. exitValue = {}
assembler.jlink.jdk                        = jdk version is {}
assembler.jlink.target                     = target version is {}
ERROR_jlink_target_not_compatible          = Target JDK {} is not compatible with {}
assembler.copy.jars                        = copying JARs to {}
assembler.copy.files                       = copying files to {}
ERROR_assembler_delete_archive             = Could not delete previous archive {}
assembler.resolved.module.names            = resolved moduleNames: {}
ERROR_assembler_delete_image               = Could not delete previous image {}
ERROR_assembler_copy_jars                  = Could not copy JARs to {}
ERROR_assembler_copy_launcher              = Could not copy launcher to {}
ERROR_assembler_invalid_jdk_release        = Invalid JDK [{}] release file not found
ERROR_assembler_invalid_jdk_release_file   = Invalid JDK release file [{}]
assembler.copying                          = copying {}
ERROR_assembler_copying_jars               = Unexpected error when copying JAR files
ERROR_assembler_copying_files              = Unexpected error when copying files
ERROR_assembler_create_directories         = Could not create directories
assembler.graal.java                       = java version is {}
assembler.graal.graal                      = graal version is {}
assembler.graal.install.native.exec        = installing native-image executable
ERROR_assembler_invalid_graal_release      = Invalid Graal [{}] release file not found
ERROR_assembler_invalid_graal_release_file = Invalid Graal release file [{}]

ERROR_invalid_config_file       = Invalid config file. {}
ERROR_parsing_config_file       = Unexpected error parsing config file. {}
ERROR_unsupported_config_format = Unsupported config format. {}

releaser.tag.and.release.skipped = Release and tag are skipped

artifacts.not.exists                     = artifact does not exist: {}
artifacts.newer                          = {} is newer than {}
ERROR_artifacts_unexpected_error_copying = Unexpected error copying {} to {}
ERROR_artifacts_glob_resolution          = Some globs failed to be resolved
ERROR_artifacts_unexpected_error_globs   = Unexpected error when resolving globs
ERROR_artifacts_unexpected_error_path    = Unexpected error visiting path {}

validation_must_define_pattern           = {} must define a pattern
validation_must_not_be_blank             = {} must not be blank
validation_must_not_be_null              = {} must not be null
validation_is_null                       = {} is null
validation_is_empty                      = {} is empty
validation_is_missing                    = {} is missing
validation_directory_not_exist           = {} does not exist: {}
validation_is_not_a_directory            = {} is not a directory: {}
validation_directory_is_empty            = {} is empty: {}
validation_must_not_be_empty             = {} must not be empty
validation_value_cannot_be               = {} can not be {}
validation_multiple_assemblers           = {} has more than 1 assembler: {}
validation_brew_multiple_artifact        = {} has more than one {} artifact
validation_brew_single_artifact          = {} can only have a single matching .dmg, .pkg, or .zip artifact
validation_brew_duplicate_definition     = {} is defined for more than one distribution: {}
validation_discussions_enabled           = discussions may only be used when releasing to GitHub
validation_distributions_java            = {} is set to {} but neither {} nor {} have been set
validation_distributions_multiple        = {} has more than one artifact with {} platform for extension {}
validation_distributions_java_types      = {} must be a valid Java distribution type, one of [{}]
# do no translate distribution.{}.artifact[{}].platform
validation_distributions_platform        = distribution.{}.artifact[{}].platform ({}) is not supported. \
  Please use `${name}` or `${name}-${arch}` from{}       name = {}{}       arch = {}
# keep these spaces ----------------------------->       <--------->       <------->
# do not translate distribution., platform
validation_distributions_platform_check  = distribution.{} is of type {} and {} requires a explicit platform on each artifact
# do not translate distribution.
validation_distributions_disable         = disabling distribution.{}.{} because there are no matching artifacts
validation_docker_no_registries          = {} does not define any registries. Image publication will be disabled
# do not translate .sign
validation_git_signing                   = {}.sign is set to `true` but the signing block is not enabled
validation_git_required                  = {} or {} is required
# do not translate .changelog
validation_changelog_multiple_categories = {}.changelog has more than one category with title: {}
# do not translate distribution.{}.jbang
validation_jbang_reverse_host            = distribution.{}.jbang must define an extra property named {}
# do not translate jbang.alias
validation_jbang_multiple_definition     = jbang.alias {} is defined for more than one distribution: {}
validation_missing_assembly              = Missing outputs for {}.{}. Distribution {} has not been assembled
# do not translate archive.
validation_archive_empty_fileset         = archive.{} does not define fileSets
# do not translate jlink., platform
validation_jlink_jdk_platform            = jlink.{} defines JDKs without platform
# do not translate jlink.
validation_jlink_jdk_multiple_platforms  = jlink.{} has more than one JDK for {}
# do no translate jlink.{}.targetJdk[{}].platform
validation_jlink_platform                = jlink.{}.targetJdk[{}].platform ({}) is not supported. \
  Please use `${name}` or `${name}-${arch}` from{}       name = {}{}       arch = {}
# keep these spaces ----------------------------->       <--------->       <------->
validation_mail_not_blank                = {} or {} must not be blank
# do not translate docker.specs
validation_packagers_docker_specs        = docker.specs can only be defined inside distributions
validation_release_no_providers          = No release provider has been configured
validation_release_requirement           = Only one of {} can be enabled
validation_skdman_disable                = There are no active distributions. Disabling Sdkman announcer
# do not translate sdkman.candidate
validation_sdkman_multiple_definition    = sdkman.candidate {} is defined for more than one distribution: {}
# do not translate slack.token, slack.webhook
validation_slack_token                   = slack.token or slack.webhook must be provided

default_discussion_title = {{projectNameCapitalized}} {{projectVersion}} released!
default_release_message  = 🚀 {{projectNameCapitalized}} {{projectVersion}} has been released! {{releaseNotesUrl}}
default_category_feature = 🚀 Features
default_category_bug_fix = 🐛 Bug Fixes

ERROR_path_does_not_exist               = Path does not exist. {}
ERROR_unexpected_error_reading_template = Unexpected error reading template {}
ERROR_tool_name_not_blank               = Tool name must not be blank
ERROR_tool_not_configured               = Tool {} has not been configured
ERROR_tool_not_supported                = Tool {} is not supported

environment.load.variables           = Loading variables from {}
environment.variables.load.error     = Could not load variables from {}
environment.variables.source.missing = Variables source {} does not exist

ERROR_unexpected_glob_resolve = Unexpected error resolving glob {}
ERROR_glob_resolve            = Could not resolve glob {}

context.platform.selection.active    = Platform selection is in effect
context.platform.selection.no.match  = The following platforms did not match: {}
context.platform.selection.valid     = Please use `${name}` or `${name}-${arch}` from{}        name = {}{}        arch = {}
# keep these spaces ------------------------------------------------------------------>        <--------->        <------->
context.platform.selection.unmatched = Unmatched platforms: {}
context.platform.selection.artifacts = Artifacts will be filtered by platform matching: {}
context.configuration.validation     = Validating configuration
context.adjust.assemblies            = adjusting distributions with assemblies
context.writing.properties           = Writing output properties to {}
context.writing.properties.error     = Could not write output properties to {}
ERROR_signing_init_keyring           = Could not initialize keyring
ERROR_distribution_name_is_blank     = Distribution name must not be blank
ERROR_distribution_not_found         = Distribution {} not found
ERROR_version_invalid                = Version {} does not follow the {} spec

templates.templates.resolve.classpath           = resolving templates from classpath
templates.template.resolve.classpath            = resolving template from classpath for {}@{}
templates.search_matching_multiple              = searching for template matching {}*
templates.search_matching                       = searching for template matching {}
templates.found                                 = found template {}
ERROR_classpath_template_resolve                = Could not find location of classpath templates
ERROR_unexpected_reading_template_for           = Unexpected error reading template for {} from {}
ERROR_unexpected_reading_templates_distribution = Unexpected error reading templates for distribution {}/{} from {}
ERROR_unexpected_reading_templates_from         = Unexpected error reading templates from {}
ERROR_unexpected_reading_templates_announcer    = Unexpected error reading templates for announcer {} from classpath
ERROR_template_not_found                        = Template for {}@{} was not found

templates.announcer.not.supported = Announcer {} is not supported
templates.create.directory        = Creating output directory {}
templates.writing.file            = Writing file {}
templates.file_exists.error       = File {} already exists and overwrite was set to false
# do not translate distributionType, distributionName, toolName
ERROR_unexpected_template_fail    = Unexpected error when generating template. distributionType={}, distributionName={}, toolName={}

ERROR_environment_property_check  = {} must not be blank. Configure a value using the {}, or define a {} environment variable, or define a key/value pair in {}
ERROR_files_unpack_outside_target = Entry is outside of the target dir: {}
ERROR_files_unpack_fail_dir       = failed to create directory {}
ERROR_files_copy                  = Unable to copy: {}
ERROR_files_create                = Unable to create: {}
ERROR_files_cycle                 = Cycle detected: {}
ERROR_files_copy_attributes       = Unable to copy all attributes to: {}
ERROR_mustache_write_value        = Failed to write value:

ERROR_unexpected_release_announce = Unexpected error when announcing release
ERROR_unexpected_release_create   = Unexpected error when creating release
ERROR_unexpected_release_sign     = Unexpected error when signing release
workflow.dryrun                   = dryrun set to {}
workflow.success                  = JReleaser succeeded after {}
workflow.failure                  = JReleaser failed after {}

ERROR_unexpected_article_announcer   = Unexpected error when preparing {}
# no not translate article
announcer.article.resolve.templates  = resolving templates for article announcer
announcer.article.eval.template      = evaluating template {}
announcer.article.write.template     = writing template {}
ERROR_unexpected_template_resolution = Unexpected error resolving templates from {}
repository.setup                     = setting up repository {}
repository.locate                    = locating repository {}
repository.clone                     = cloning {}
repository.commit.setup              = setting up commit
repository.push                      = pushing to {}
repository.commit.push               = pushing commit to remote
ERROR_unexpected_repository_update   = Unexpected error updating {}
repository.copy.files                = copying files from {}
ERROR_repository_copy_files          = Could not copy files from {}

artifacts.no.match      = No matching artifacts. Skipping
ERROR_unexpected_upload = Unexpected error when uploading {}
generic.git.warning     = Releasing to a generic Git repository is not supported
changelog.generator.resolve.commits     = resolving commits
changelog.generator.sort.commits        = sorting commits {}
changelog.generator.lookup.tag          = looking for tag that matches '{}'
changelog.generator.lookup.previous.tag = looking for previous tag '{}'
changelog.generator.lookup.matching.tag = looking for tags that match '{}', excluding '{}'
changelog.generator.lookup.before.tag   = looking for a tag before '{}' that matches '{}'
changelog.generator.tag.found           = found tag {}
changelog.generator.generate            = Generating changelog: {}
changelog.generator.read                = Reading changelog from {}
ERROR_changelog_not_exist               = Changelog {} does not exist
ERROR_git_repository_remote             = repository doesn't have a remote named '{}'
ERROR_git_repository_remote_missing_url = {} remote does not have a configured URL
ERROR_git_repository_remote_url_parse   = Unparseable remote URL {}
# do not translate origin
ERROR_git_repository_origin_remote      = Could not determine 'origin' remote
ERROR_git_delete_tag                    = Could not delete tag {}
ERROR_git_find_tag                      = Could not find tag {}
ERROR_git_create_tag                    = Could not create tag {}
git.tag                                 = Tagging {}
git.tag.lookup                          = looking up tag {}
git.tag.exists                          = tag {} exists
git.tag.release                         = tagging release {}
ERROR_git_release_existing_tag          = Release failed because tag {} already exists. overwrite = false
git.tag.not.exist                       = tag {} does not exist
git.push.release                        = pushing to {}
git.push.tag                            = pushing tag to remote, dryrun = {}
git.repository.lookup                   = lookup repository {}/{}
git.repository.create                   = creating repository {}/{}
git.milestone.lookup                    = lookup milestone '{}' on {}/{}
git.milestone.close                     = closing milestone '{}' on {}/{}
git.project.create                      = creating project {}/{}
git.fetch.current.user                  = fetching current user
git.fetch.gitlab.project_by_id          = fetching project with GitLab id {}
git.fetch.gitlab.project.by.user        = fetching project {} for user {} ({})
ERROR_project_not_exist                 = Project {} does not exist or it's not visible
git.gitlab.project.found                = found {} (ID: {})
git.fetch.release.by.tag                = fetching release on {}/{} with tag {}
git.fetch.release.on.tag                = fetching release on {} with tag {}
git.delete.tag.from                     = deleting tag {} from {}/{}
git.delete.tag.from.repository          = deleting tag {} from {}
git.delete.release.from                 = deleting release {} from {}/{}
git.delete.release.from.id              = deleting release {} from {}/{} ({})
git.create.release                      = creating release on {}/{} with tag {}
git.create.release.repository           = creating release on {} with tag {}
git.update.release                      = updating release on {}/{} with tag {}
git.upload.assets                       = uploading assets to {}/{}
git.upload.asset                        = - uploading {}
git.upload.asset.failure                = x failed to upload {}
git.upload.asset.links                  = linking assets to {}/{} with tag {}
git.upload.asset.link                   = - linking {}
git.upload.asset.link.failure           = x failed to link {}
git.user.lookup                         = looking up user for {} <{}>
ERROR_git_organization_not_exist        = Organization {} does not exist
ERROR_git_team_not_exist                = Team {} does not exist
git.releaser.releasing                  = Releasing to {}
git.releaser.release.lookup             = looking up release with tag {} at repository {}
git.releaser.release.exists             = release {} exists
git.releaser.release.delete             = deleting release {}
git.releaser.release.create             = creating release {}
git.releaser.release.update             = updating release {}
git.releaser.release.update.title       = updating release title to {}
git.releaser.release.update.body        = updating release body
git.releaser.release.not.found          = release {} does not exist
git.releaser.user.not.found             = Could not find user matching {}
git.releaser.repository.tag             = tagging local repository with {}
ERROR_git_releaser_cannot_release       = {} release failed because release {} already exists. overwrite = false; update = false
git.releaser.link.discussion            = linking release {} with discussion {}
git.releaser.link.discussion.error      = Could not update release {} with discussion category {}
ERROR_git_discussion_duplicate          = A discussion titled "{}" has already been posted to {}/{}
webhook.connection.open                 = opening connection
webhook.connection.configure            = configuring connection
webhook.message.send                    = sending message
webhook.data.send                       = sending data
webhook.response.handle                 = handling response
sdk.operation.failed                    = {} operation failed
sdkman.release.announce                 = announcing {} release of '{}' candidate
ERROR_sdkman_announce                   = Failed to announce some candidates
sdkman.no.suitable.artifacts            = No suitable artifacts were found. Skipping
sdkman.release.announce.major           = Announcing major release of '{}' candidate
sdkman.release.announce.minor           = Announcing minor release of '{}' candidate
twitter.tweet                           = tweeting: {}
twitter.tweet.size                      = status is {} chars long
ERROR_unexpected_json_format            = Unexpected error formatting message as JSON
mail.message.send                       = Sending e-mail announcement
s3.bucket.check                         = checking if bucket {} exists
s3.bucket.create                        = creating bucket {}
s3.object.check                         = checking if s3://{}/{} exists
s3.object.create                        = creating s3://{}/{}
s3.object.write                         = writing s3://{}/{}
s3.object.acl                           = adding READ permission to s3://{}/{}
ERROR_unexpected_s3_client_config       = Error while building AWS S3 client