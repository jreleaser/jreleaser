/*
 * SPDX-License-Identifier: Apache-2.0
 *
 * Copyright 2020-2025 The JReleaser authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
plugins {
    id 'application'
    id 'org.jreleaser.jdks'
}

application {
    mainClass = 'org.jreleaser.cli.Main'
}

jar {
    manifest {
        attributes([
            'Main-Class': 'org.jreleaser.cli.Main',
            'Automatic-Module-Name': project.findProperty('automatic.module.name')
        ])
    }
}

startScripts {
    classpath = files('$APP_HOME/lib/*')
}

config {
    info {
        specification { enabled = true }
    }
}

configurations {
    graalvm
}

dependencies {
    api project(':jreleaser-engine')
    graalvm project(':jreleaser-graalvm-sdk')
    //config
    api project(':jreleaser-config-yaml')
    api project(':jreleaser-config-toml')
    api project(':jreleaser-config-json')

    annotationProcessor "info.picocli:picocli-codegen:$picocliVersion"
    api "info.picocli:picocli:$picocliVersion"
    runtimeOnly "org.slf4j:slf4j-simple:$slf4jVersion"
}

processResources {
    inputs.property('version', project.version)
    filesMatching(['**/Banner*.properties']) {
        expand(
            'version': project.version,
            'id': 'jreleaser',
            'name': 'jreleaser'
        )
    }
}

distributions {
    main {
        contents {
            from('../..') {
                include 'licenses/*'
                include 'LICENSE'
                include 'NOTICE'
                include 'VERSION'
            }
        }
    }
}

jdks {
    zulu21Linux {
        platform = 'linux-x86_64'
        url = 'https://cdn.azul.com/zulu/bin/zulu21.38.21-ca-jdk21.0.5-linux_x64.tar.gz'
        checksum = '5320a33714f58c0104191d244759daa6a6d46819d447347ba9003132e5489d92'
    }
    zulu21LinuxArm {
        platform = 'linux-aarch64'
        url = 'https://cdn.azul.com/zulu/bin/zulu21.38.21-ca-jdk21.0.5-linux_aarch64.tar.gz'
        checksum = '8bd387315620bb66a84945a51bcebb9016354b557c747e94d4837e68ea4077ec'
    }
    zulu21LinuxMusl {
        platform = 'linux_musl-x86_64'
        url = 'https://cdn.azul.com/zulu/bin/zulu21.38.21-ca-jdk21.0.5-linux_musl_x64.tar.gz'
        checksum = '8d383d47238b44361761edc9e169a215560009b15a0f8f56090583fc4b4709b6'
    }
    zulu21LinuxMuslArm {
        platform = 'linux_musl-aarch64'
        url = 'https://cdn.azul.com/zulu/bin/zulu21.38.21-ca-jdk21.0.5-linux_musl_aarch64.tar.gz'
        checksum = 'b4725425f48138c59e1ee53b59aa5217c5e4571b63d6a801af6809f1e74e95b9'
    }
    zulu21Windows {
        platform = 'windows-x86_64'
        url = 'https://cdn.azul.com/zulu/bin/zulu21.38.21-ca-jdk21.0.5-win_x64.zip'
        checksum = '8dea44fd3a6f7ad0f42f38abc1371075710b58bed9bd8f093c2ef2d450dd2672'
    }
    zulu21WindowsArm {
        platform = 'windows-aarch64'
        url = 'https://cdn.azul.com/zulu/bin/zulu21.38.21-ca-jdk21.0.5-win_aarch64.zip'
        checksum = 'f5ad7f539f74d12b6248c0fd9f4b416455dcf6803900b28e8d19054f3dcc6e98'
    }
    zulu21Osx {
        platform = 'osx-x86_64'
        url = 'https://cdn.azul.com/zulu/bin/zulu21.38.21-ca-jdk21.0.5-macosx_x64.zip'
        checksum = 'a77a9c67d8f9a2341674bcea7056d9d70f69ff0850dd3874303641cc9cec2dfc'
    }
    zulu21OsxArm {
        platform = 'osx-aarch64'
        url = 'https://cdn.azul.com/zulu/bin/zulu21.38.21-ca-jdk21.0.5-macosx_aarch64.zip'
        checksum = 'd5c289ce2c8c67f414ede3b170dea72ca9a1322520498325a51d83bbaa94d1f0'
    }
    graal25Osx {
        platform = 'osx-x86_64'
        url = 'https://download.oracle.com/graalvm/25/archive/graalvm-jdk-25.0.1_macos-x64_bin.tar.gz'
        checksum = 'a762ca1d9a163e32790b9286f3af4c16369729ff27999d8dbab60d7be16cff2f'
    }
    graal25OsxArm {
        platform = 'osx-aarch64'
        url = 'https://download.oracle.com/graalvm/25/archive/graalvm-jdk-25.0.1_macos-aarch64_bin.tar.gz'
        checksum = '19dfd49ad112e6e6c2bdedc507c6859bf21294fa4c164f1be670d469c65b7993'
    }
    graal25Linux {
        platform = 'linux-x86_64'
        url = 'https://download.oracle.com/graalvm/25/archive/graalvm-jdk-25.0.1_linux-x64_bin.tar.gz'
        checksum = 'd4ab02ba1029e639f03374fdf91c242e1d0d49079880e1af1932ea7b7c431837'
    }
    graal25LinuxArm {
        platform = 'linux-aarch64'
        url = 'https://download.oracle.com/graalvm/25/archive/graalvm-jdk-25.0.1_linux-aarch64_bin.tar.gz'
        checksum = 'edd77565c76570a6df5f38e53d54524102f2c1b1cf74eebd9f51e7fc19f667cd'
    }
    graal25Windows {
        platform = 'windows-x86_64'
        url = 'https://download.oracle.com/graalvm/25/archive/graalvm-jdk-25.0.1_windows-x64_bin.zip'
        checksum = '5398592ecdf8f47f4b481896e1e63cbfff4cb8e0ba61538526e3b3795b1a85e5'
    }
}

copyDependencies {
    dependsOn classes
    inputs.files(configurations.runtimeClasspath)
    configuration = 'runtimeClasspath'
}

assemble.dependsOn(copyDependencies, tasks.register('copyGraalvmJavaSdk', Copy) { t->
    t.from configurations.graalvm
    t.into 'build/dependencies/graalvm'
})

afterEvaluate {
    def copyJdksToCache = project.tasks.findByName('copyJdksToCache')
    ['zulu21Linux', 'zulu21LinuxArm', 'zulu21LinuxMusl', 'zulu21LinuxMuslArm',
     'zulu21Windows', 'zulu21WindowsArm', 'zulu21Osx', 'zulu21OsxArm',
     'graal25Osx', 'graal25OsxArm', 'graal25Linux', 'graal25LinuxArm', 'graal25Windows'].each { jdk ->
        def copyTask = project.tasks.findByName('copyJdkFromCache' + jdk.capitalize())
        if (copyJdksToCache && copyTask) copyTask.dependsOn(copyJdksToCache)
    }
}