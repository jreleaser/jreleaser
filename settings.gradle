/*
 * SPDX-License-Identifier: Apache-2.0
 *
 * Copyright 2020-2023 The JReleaser authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        gradlePluginPortal()
    }
    dependencies {
        classpath "gradle.plugin.com.github.johnrengelman:shadow:$shadowPluginVersion"
        classpath "org.kordamp.gradle:java-project-gradle-plugin:$kordampPluginVersion"
        classpath "org.kordamp.gradle:groovy-project-gradle-plugin:$kordampPluginVersion"
        classpath "org.kordamp.gradle:plugin-gradle-plugin:$kordampPluginVersion"
        classpath "org.kordamp.gradle:checkstyle-gradle-plugin:$kordampPluginVersion"
        classpath "org.kordamp.gradle:jacoco-gradle-plugin:$kordampPluginVersion"
        classpath "org.kordamp.gradle:spotbugs-gradle-plugin:$kordampPluginVersion"
        classpath "org.kordamp.gradle:errorprone-gradle-plugin:$kordampPluginVersion"
        classpath "org.kordamp.gradle:sonar-gradle-plugin:$kordampPluginVersion"
        classpath "org.kordamp.gradle:kordamp-parentbuild:$kordampBuildVersion"
        classpath "org.jreleaser:jdks-gradle-plugin:$jdksPluginVersion"
        classpath 'de.undercouch:gradle-download-task:4.1.1'
        classpath "org.ow2.asm:asm:$asmVersion"
        classpath "org.ow2.asm:asm-commons:$asmVersion"
        classpath "org.ow2.asm:asm-analysis:$asmVersion"
        classpath "org.ow2.asm:asm-tree:$asmVersion"
        classpath "org.kordamp.gradle:oci-gradle-build-cache-plugin:$ociBuildCacheVersion"
        classpath "org.moditect:moditect-gradle-plugin:$moditectPluginVersion"
    }
}

apply plugin: 'org.kordamp.gradle.kordamp-parentbuild'
apply plugin: 'org.kordamp.gradle.oci-build-cache'

rootProject.name = 'jreleaser'

projects {
    directories = ['infra', 'api', 'core', 'sdks', 'plugins']

    plugins {
        all {
            id 'idea'
        }
        path(':') {
            id 'org.kordamp.gradle.java-project'
            id 'org.kordamp.gradle.checkstyle'
            id 'org.kordamp.gradle.coveralls'
            id 'org.kordamp.gradle.spotbugs'
            id 'org.kordamp.gradle.errorprone'
            id 'org.kordamp.gradle.sonar'
        }
        dirs(['infra', 'api', 'core', 'sdks', 'plugins']) {
            id 'java-library'
        }
    }
}

enforce {
    mergeStrategy = 'append'

    rule(enforcer.rules.RequireJavaVersion) { r ->
        r.version.set('11')
    }

    rule(enforcer.rules.BanDuplicateClasses) { r ->
        r.ignoreWhenIdentical.set(true)
        r.dependency("dev.gradleplugins:gradle-api:$gradleVersion".toString()) { d->
            d.ignore('org.apache.commons.logging.*')
        }
    }

    rule(enforcer.rules.EnforceBytecodeVersion) { r ->
        r.exclude("org.graalvm.sdk:graal-sdk:$graalVersion")
        r.exclude("org.graalvm.nativeimage:svm:$graalVersion")
        r.exclude("org.graalvm.nativeimage:pointsto:$graalVersion")
        r.exclude("org.graalvm.nativeimage:native-image-base:$graalVersion")
        r.exclude("org.graalvm.compiler:compiler:$graalVersion")
        r.exclude("org.graalvm.truffle:truffle-api:$graalVersion")
        r.exclude("org.graalvm.nativeimage:objectfile:$graalVersion")
        r.exclude("org.kordamp.gradle:base-gradle-plugin:$kordampPluginVersion")
        r.exclude("org.jreleaser:jreleaser-graalvm-sdk")
        r.exclude("org.jreleaser:jreleaser-test-support")
        // check & tests
        r.exclude("org.junit-pioneer:junit-pioneer:$junitPioneerVersion")
        r.exclude("com.puppycrawl.tools:checkstyle:$checkstyleVersion")
        r.exclude("com.google.errorprone:error_prone_core:$errorproneVersion")
        r.exclude("com.google.errorprone:error_prone_annotation:$errorproneVersion")
        r.exclude("com.google.errorprone:error_prone_check_api:$errorproneVersion")
        r.exclude("org.mockito:mockito-core:$mockitoVersion")
        r.exclude("org.mockito:mockito-junit-jupiter:$mockitoVersion")
        r.exclude("org.mockito:mockito-inline:$mockitoInlineVersion")
    }

    rule(enforcer.rules.ForceDependencies) { r ->
        r.dependencies.addAll "com.fasterxml.jackson.core:jackson-annotations:$jacksonVersion",
            "com.fasterxml.jackson.core:jackson-core:$jacksonVersion",
            "com.fasterxml.jackson.core:jackson-databind:$jacksonDatabindVersion",
            "com.fasterxml.jackson.dataformat:jackson-dataformat-cbor:$jacksonVersion",
            "com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:$jacksonVersion",
            "com.fasterxml.jackson:jackson-bom:$jacksonVersion",
            "com.github.ben-manes.caffeine:caffeine:$caffeineVersion",
            "com.github.luben:zstd-jni:$zstdVersion",
            "com.google.code.findbugs:jsr305:$jsr305Version",
            "com.google.errorprone:error_prone_core:$errorproneVersion",
            "com.google.errorprone:error_prone_annotations:$errorproneVersion",
            "com.google.errorprone:error_prone_check_api:$errorproneVersion",
            "com.google.guava:guava:$guavaVersion",
            "com.googlecode.javaewah:JavaEWAH:$javaEWAHVersion",
            "com.sun.mail:jakarta.mail:$mailApiVersion",
            "commons-codec:commons-codec:$commonsCodecVersion",
            "commons-io:commons-io:$commonsIoVersion",
            "info.picocli:picocli:$picocliVersion",
            "jakarta.activation:jakarta.activation-api:$jakartaActivatinVersion",
            "junit:junit:$junitVersion",
            "net.bytebuddy:byte-buddy:$bytebuddyVersion",
            "net.minidev:json-smart:$jsonSmartVersion",
            "org.apache.commons:commons-compress:$commonsCompressVersion",
            "org.apache.commons:commons-lang3:$commonsLang3Version",
            "org.apache.httpcomponents:httpclient:$httpclientVersion",
            "org.apache.httpcomponents:httpcore:$httpcoreVersion",
            "org.apache.maven.shared:maven-shared-utils:$mavenSharedVersion",
            "org.apache.maven:maven-artifact:$mavenVersion",
            "org.apache.maven:maven-core:$mavenVersion",
            "org.apache.maven:maven-model:$mavenVersion",
            "org.apache.maven:maven-plugin-api:$mavenVersion",
            "org.bouncycastle:bcpg-jdk15on:$bouncyCastleVersion",
            "org.bouncycastle:bcpkix-jdk15on:$bouncyCastleVersion",
            "org.bouncycastle:bcprov-jdk15on:$bouncyCastleVersion",
            "org.bouncycastle:bcutil-jdk15on:$bouncyCastleVersion",
            "org.checkerframework:checker-qual:$checkerqualVersion",
            "org.codehaus.plexus:plexus-classworlds:$classworldsVersion",
            "org.codehaus.plexus:plexus-component-annotations:$plexusAnnotationsVersion",
            "org.codehaus.plexus:plexus-utils:$plexusVersion",
            "org.hamcrest:hamcrest-core:$hamcrestVersion",
            "org.hamcrest:hamcrest:$hamcrestVersion",
            "org.junit:junit-bom:$junit5Version",
            "org.junit.jupiter:junit-jupiter-api:$junit5Version",
            "org.opentest4j:opentest4j:$opentest4jVersion",
            "org.ow2.asm:asm:$asmVersion",
            "org.mockito:mockito-core:$mockitoVersion",
            "org.mockito:mockito-junit-jupiter:$mockitoVersion",
            "org.mockito:mockito-inline:$mockitoInlineVersion",
            "org.slf4j:slf4j-api:$slf4jVersion",
            "org.yaml:snakeyaml:$snakeYamlVersion"
    }
}

ext.isCiServer = System.getenv().containsKey('CI')

println "Running on CI: ${isCiServer? 'YES' : 'NO'}"
println "OCI compartmentId is ${System.getenv().containsKey('JRELEASER_OCI_COMPARTMENTID')? '': 'NOT '}set"

buildCache {
    local {
        enabled = !isCiServer
    }
    remote(org.kordamp.gradle.plugin.buildcache.OCIBuildCache) {
        configFile    = '.oci/config'
        compartmentId = System.getenv().get('JRELEASER_OCI_COMPARTMENTID')
        failOnError = false
        push = isCiServer
    }
}